"use strict";(self.webpackChunkdagger=self.webpackChunkdagger||[]).push([[7522],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=m(t),c=i,g=p["".concat(l,".").concat(c)]||p[c]||d[c]||r;return t?a.createElement(g,o(o({ref:n},u),{},{components:t})):a.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var m=2;m<r;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8861:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(7462),i=(t(7294),t(3905));const r={},o="Example Queries",s={unversionedId:"guides/query_examples",id:"guides/query_examples",isDocsHomePage:!1,title:"Example Queries",description:"Dagger uses Apache Calcite as the querying framework. Find the documentation for the same here. Templates of some of the commonly used types of queries are listed down.",source:"@site/docs/guides/query_examples.md",sourceDirName:"guides",slug:"/guides/query_examples",permalink:"/dagger/docs/guides/query_examples",editUrl:"https://github.com/raystack/dagger/edit/master/docs/docs/guides/query_examples.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Create a job",permalink:"/dagger/docs/guides/create_dagger"},next:{title:"Use Transformer",permalink:"/dagger/docs/guides/use_transformer"}},l=[{value:"Sample input schema",id:"sample-input-schema",children:[{value:"Sample booking event schema",id:"sample-booking-event-schema",children:[]},{value:"Sample payment event schema",id:"sample-payment-event-schema",children:[]}]},{value:"Influx Sink",id:"influx-sink",children:[{value:"Example query",id:"example-query",children:[]}]},{value:"Kafka Sink",id:"kafka-sink",children:[{value:"Example query",id:"example-query-1",children:[]}]},{value:"BigQuery Sink",id:"bigquery-sink",children:[{value:"Example query",id:"example-query-2",children:[]}]},{value:"Aggregation - Tumble window",id:"aggregation---tumble-window",children:[{value:"Example query",id:"example-query-3",children:[]}]},{value:"Aggregation - Hop window",id:"aggregation---hop-window",children:[{value:"Example query",id:"example-query-4",children:[]}]},{value:"Subquery/Inner Query",id:"subqueryinner-query",children:[{value:"Example query",id:"example-query-5",children:[]}]},{value:"Feast Row Transformation",id:"feast-row-transformation",children:[{value:"Example query",id:"example-query-6",children:[]}]},{value:"Inner Join",id:"inner-join",children:[{value:"Example query(no with)",id:"example-queryno-with",children:[]},{value:"Example query(using with)",id:"example-queryusing-with",children:[]}]},{value:"Union",id:"union",children:[{value:"Example query",id:"example-query-7",children:[]}]},{value:"Unnest",id:"unnest",children:[{value:"Example query(list)",id:"example-querylist",children:[]},{value:"Example query(map)",id:"example-querymap",children:[]}]}],m={toc:l},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"example-queries"},"Example Queries"),(0,i.kt)("p",null,"Dagger uses Apache Calcite as the querying framework. Find the documentation for the same ",(0,i.kt)("a",{parentName:"p",href:"https://calcite.apache.org/docs/reference.html"},"here"),". Templates of some of the commonly used types of queries are listed down."),(0,i.kt)("h2",{id:"sample-input-schema"},"Sample input schema"),(0,i.kt)("h3",{id:"sample-booking-event-schema"},"Sample booking event schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message SampleBookingInfo {\n  string order_number = 1;\n  string order_url = 2;\n  string status = 3;\n  google.protobuf.Timestamp event_timestamp = 4;\n  string customer_id = 5;\n  string driver_id = 6;\n  string service_type = 7;\n  string service_area_id = 8;\n  repeated Item items = 9;\n  map<string, string> metadata = 10;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message Item {\n  string id = 1;\n  int32 quantity = 2;\n  string name = 3;\n}\n")),(0,i.kt)("h3",{id:"sample-payment-event-schema"},"Sample payment event schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message SamplePaymentInfo {\n  string order_id = 1;\n  string customer_id = 2;\n  google.protobuf.Timestamp event_timestamp = 3;\n  int64 order_amount = 4;\n}\n")),(0,i.kt)("h2",{id:"influx-sink"},"Influx Sink"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"While using Dagger with InfluxDB sink, ",(0,i.kt)("inlineCode",{parentName:"li"},"tag_")," should be appended to the beginning of those columns which you want as dimensions. Dimensions will help you slice the data in InfluxDB-Grafana. InfluxDB tags are essentially the columns on which data is indexed. Find more on influxDB tags ",(0,i.kt)("a",{parentName:"li",href:"https://docs.influxdata.com/influxdb/v1.8/concepts/glossary/#tag"},"here"),"."),(0,i.kt)("li",{parentName:"ul"},"DO NOT use ",(0,i.kt)("inlineCode",{parentName:"li"},"tag_")," for high cardinal data points such as customer_id, merchant_id etc unless you provide a filtering condition; this will create tag explosion & affect the InfluxDB."),(0,i.kt)("li",{parentName:"ul"},"Ensure there is at least one value field present in the query(not starting with ",(0,i.kt)("inlineCode",{parentName:"li"},"tag_"),")."),(0,i.kt)("li",{parentName:"ul"},"In case you want your dimensions without the prefix ",(0,i.kt)("inlineCode",{parentName:"li"},"tag_")," you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"label_")," prefix. The name of the dimension will not have ",(0,i.kt)("inlineCode",{parentName:"li"},"tag_")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"label_")," prefix.")),(0,i.kt)("h3",{id:"example-query"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n order_number,\n service_type as tag_service_id,\n status\nfrom\n  `booking`\n")),(0,i.kt)("h2",{id:"kafka-sink"},"Kafka Sink"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Tag_")," prefix should not be used before the dimensions."),(0,i.kt)("li",{parentName:"ul"},"Ensure that sink type is selected as Kafka."),(0,i.kt)("li",{parentName:"ul"},"Dimensions & metrics from the SELECT section in the query should be mapped exactly to the field names in the output proto."),(0,i.kt)("li",{parentName:"ul"},"Data types of the selected fields should exactly match to the output proto fields."),(0,i.kt)("li",{parentName:"ul"},"Unlike Influx sink Dagger, high cardinality should not be an issue in Kafka sink.")),(0,i.kt)("h3",{id:"example-query-1"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n order_number,\n service_type,\n status\nfrom\n  `booking`\n")),(0,i.kt)("h2",{id:"bigquery-sink"},"BigQuery Sink"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Tag_")," prefix should not be used before the dimensions."),(0,i.kt)("li",{parentName:"ul"},"Ensure that sink type is selected as bigquery."),(0,i.kt)("li",{parentName:"ul"},"Dimensions & metrics from the SELECT section in the query should be mapped exactly to the field names in the output protobuf type configured for bigquery sink"),(0,i.kt)("li",{parentName:"ul"},"Data types of the selected fields should exactly match to the output protobuf type configured for bigquery sink")),(0,i.kt)("h3",{id:"example-query-2"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n order_number,\n service_type,\n status\nfrom\n  `booking`\n")),(0,i.kt)("h2",{id:"aggregation---tumble-window"},"Aggregation - Tumble window"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use this for aggregating data points using a TUMBLE window function (data aggregated for all points in the window at the end of each cycle)."),(0,i.kt)("li",{parentName:"ul"},"Use the windowing function for Tumble window using the keyword TUMBLE_END(datetime, INTERVAL 'duration' unit) & TUMBLE (datetime, INTERVAL 'duration' unit ) in SELECT & GROUP BY section respectively (duration is a number & unit can be SECOND/MINUTE/HOUR).")),(0,i.kt)("h3",{id:"example-query-3"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  count(1) as booking_count,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nfrom\n  `booking`\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '60' SECOND)\n")),(0,i.kt)("h2",{id:"aggregation---hop-window"},"Aggregation - Hop window"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use this for aggregating data points using a HOP window function (data aggregated at every slide internal for all points in the window interval)."),(0,i.kt)("li",{parentName:"ul"},"Use the windowing function for Hop window using the keyword HOP_END(datetime, SLIDE_INTERVAL 'duration' unit, WINDOW_INTERVAL 'duration' unit) & HOP (datetime, SLIDE_INTERVAL 'duration' unit, WINDOW_INTERVAL 'duration' unit) in SELECT & GROUP BY section respectively (both slide interval & window interval are numbers & units can be SECOND/MINUTE/HOUR).")),(0,i.kt)("h3",{id:"example-query-4"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  service_area_id AS tag_service_area_id,\n  count(1) AS number_of_bookings,\n  HOP_END(\n    rowtime,\n    INTERVAL '60' SECOND,\n    INTERVAL '1' HOUR\n  ) AS window_timestamp\nFROM\n  `booking`\nGROUP BY\n  HOP(\n    rowtime,\n    INTERVAL '60' SECOND,\n    INTERVAL '1' HOUR\n  ),\n  service_area_id\n")),(0,i.kt)("h2",{id:"subqueryinner-query"},"Subquery/Inner Query"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can use as many inner queries as required."),(0,i.kt)("li",{parentName:"ul"},"In case you want to use window aggregations both in inner and outer query, use ",(0,i.kt)("a",{parentName:"li",href:"https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/table/sql.html#time-attributes"},"TUMBLE_ROWTIME")," to get the output rowtimes from the inner window.")),(0,i.kt)("h3",{id:"example-query-5"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  booking_count,\n  cancelled_order,\n  window_timestamp\nFROM\n  (\n    SELECT\n      count(1) as booking_count,\n      cast(\n        (\n          Sum(\n            Case\n              When status in (\n                'CUSTOMER_CANCELLED'\n              ) Then 1\n              Else 0\n            End\n          )\n        ) as float\n      ) as cancelled_order,\n      TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\n    from\n      `booking`\n    GROUP BY\n      TUMBLE (rowtime, INTERVAL '60' SECOND)\n  )\n")),(0,i.kt)("h2",{id:"feast-row-transformation"},"Feast Row Transformation"),(0,i.kt)("p",null,"This sample query is for transforming data to Feature rows for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/feast-dev/feast/tree/master/docs#introduction"},"Feast")," using ",(0,i.kt)("a",{parentName:"p",href:"/dagger/docs/reference/udfs#Features"},"Features UDF"),"."),(0,i.kt)("h3",{id:"example-query-6"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  'MINUTE' AS granularity,\n  customer_id AS entityKey,\n  'customers' AS entityName,\n  Features(\n    LOWER(service_type),\n    customer_id\n  ) AS features,\n  TUMBLE_END(rowtime, INTERVAL '1' MINUTE) AS eventTimestamp\nFROM\n  `booking`\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '1' MINUTE),\n  customer_id\n")),(0,i.kt)("h2",{id:"inner-join"},"Inner Join"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In order to keep state size in check, we recommend using time interval joins."),(0,i.kt)("li",{parentName:"ul"},"Time interval should be in the format table2.rowtime BETWEEN table1.rowtime - INTERVAL 'first duration' unit AND table1.rowtime + INTERVAL 'second duration' unit (both durations are numbers & units can be SECOND/MINUTE/HOUR)")),(0,i.kt)("h3",{id:"example-queryno-with"},"Example query(no with)"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema")," and payment denotes payment stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-payment-event-schema"},"sample payment schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  booking.service_type as tag_service_type,\n  count(order_number) as number_of_orders,\n  sum(order_amount) as total_amount,\n  TUMBLE_END(booking.rowtime, INTERVAL '60' MINUTE) AS window_timestamp\nfrom\n  `booking`\n  join `payment` ON booking.order_number = payment.order_id\n  AND payment.rowtime BETWEEN booking.rowtime\n  AND booking.rowtime + INTERVAL '5' MINUTE\nGROUP BY\n  TUMBLE (booking.rowtime, INTERVAL '60' MINUTE),\n  booking.service_type\n")),(0,i.kt)("h3",{id:"example-queryusing-with"},"Example query(using with)"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema")," and payment denotes payment stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-payment-event-schema"},"sample payment schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"WITH booking_info AS (\n  SELECT\n    service_type,\n    customer_id,\n    order_number,\n    rowtime\n  FROM\n    `booking`\n),\npayment_info AS (\n  SELECT\n    order_amount\n    order_id,\n    rowtime\n  FROM\n    `payment`\n)\nSELECT\n  booking_info.service_type as tag_service_type,\n  count(booking_info.order_number) as number_of_orders,\n  sum(payment_info.order_amount) as total_amount,\n  TUMBLE_END(booking_info.rowtime, INTERVAL '60' MINUTE) AS window_timestamp\nfrom\n  `booking_info`\n  join `payment_info` ON booking_info.order_number = payment_info.order_id\n  AND payment_info.rowtime BETWEEN booking_info.rowtime\n  AND booking_info.rowtime + INTERVAL '5' MINUTE\nGROUP BY\n  TUMBLE (booking_info.rowtime, INTERVAL '60' MINUTE),\n  booking_info.service_type\n")),(0,i.kt)("h2",{id:"union"},"Union"),(0,i.kt)("p",null,"In union, the fields selected from 2 streams can be combined to create a new stream. Ensure that the same field names are present on both the stream select outputs."),(0,i.kt)("h3",{id:"example-query-7"},"Example query"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema")," and payment denotes payment stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-payment-event-schema"},"sample payment schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  customer_id,\n  service_type,\n  order_number,\n  service_area_id,\n  event_timestamp\nFROM `booking`\nUNION ALL\n  (SELECT\n    customer_id,\n    '' AS service_type,\n    order_id AS order_number,\n    '' AS service_area_id,\n    event_timestamp\n  FROM `payment`)\n")),(0,i.kt)("h2",{id:"unnest"},"Unnest"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use Unnest to flatten arrays present in the schema"),(0,i.kt)("li",{parentName:"ul"},"In the FROM section, use the Unnest function after the table name in the following syntax FROM booking, UNNEST(booking.items) AS items (id, quantity, name)"),(0,i.kt)("li",{parentName:"ul"},"All fields from the array object should be added while unnesting")),(0,i.kt)("p",null,"In the above example, to retrieve the unnested fields, use items.name, items.quantity etc."),(0,i.kt)("h3",{id:"example-querylist"},"Example query(list)"),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  tag_itemname,\n  num_orders,\n  window_timestamp\nFROM\n  (\n    SELECT\n      items.name as tag_itemname,\n      count(1) as num_orders,\n      TUMBLE_END(rowtime, INTERVAL '5' MINUTE) AS window_timestamp\n    FROM\n      booking,\n      UNNEST(booking.items) AS items (id, quantity, name)\n    GROUP BY\n      TUMBLE (rowtime, INTERVAL '5' MINUTE),\n      items.name\n  )\nWHERE\n  num_orders > 100\n")),(0,i.kt)("h3",{id:"example-querymap"},"Example query(map)"),(0,i.kt)("p",null,"In Dagger, we deserialize maps also as list so unnest works in the following way."),(0,i.kt)("p",null,"Here booking denotes the booking events stream with ",(0,i.kt)("a",{parentName:"p",href:"#sample-booking-event-schema"},"sample booking schema"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-SQL"},"SELECT\n  index_map.`key` AS data_in_key,\n  index_map.`value` AS data_in_value,\nFROM booking, UNNEST(booking.metadata) AS index_map (`key`, `value`)\n")))}p.isMDXComponent=!0}}]);