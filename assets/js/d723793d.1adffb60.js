"use strict";(self.webpackChunkdagger=self.webpackChunkdagger||[]).push([[3497],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>N});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=m(a),k=r,N=u["".concat(p,".").concat(k)]||u[k]||d[k]||l;return a?n.createElement(N,i(i({ref:t},s),{},{components:a})):n.createElement(N,i({ref:t},s))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},9011:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={},i="Udfs",o={unversionedId:"reference/udfs",id:"reference/udfs",isDocsHomePage:!1,title:"Udfs",description:"This page contains references for all the custom udfs available on Dagger.",source:"@site/docs/reference/udfs.md",sourceDirName:"reference",slug:"/reference/udfs",permalink:"/dagger/docs/reference/udfs",editUrl:"https://github.com/raystack/dagger/edit/master/docs/docs/reference/udfs.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Transformers",permalink:"/dagger/docs/reference/transformers"},next:{title:"Overview",permalink:"/dagger/docs/examples/overview"}},p=[{value:"List of Java Udfs",id:"list-of-java-udfs",children:[{value:"Scalar Functions",id:"scalar-functions",children:[]},{value:"Aggregate Functions",id:"aggregate-functions",children:[]},{value:"Table Functions",id:"table-functions",children:[]}]},{value:"List of Python Udfs",id:"list-of-python-udfs",children:[{value:"Python Scalar Functions",id:"python-scalar-functions",children:[]},{value:"Python Aggregate Functions",id:"python-aggregate-functions",children:[]},{value:"Python Table Functions",id:"python-table-functions",children:[]}]}],m={toc:p},s="wrapper";function u(e){let{components:t,...l}=e;return(0,r.kt)(s,(0,n.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"udfs"},"Udfs"),(0,r.kt)("p",null,"This page contains references for all the custom udfs available on Dagger. "),(0,r.kt)("p",null,"The udfs on Dagger divided into two parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#list-of-java-udfs"},"Java Udfs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#list-of-python-udfs"},"Python Udfs"))),(0,r.kt)("h2",{id:"list-of-java-udfs"},"List of Java Udfs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#scalar-functions"},"Scalar Functions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#ArrayAggregate"},"ArrayAggregate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#ArrayOperate"},"ArrayOperate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#CondEq"},"CondEq")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#DartContains"},"DartContains")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#DartGet"},"DartGet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#Distance"},"Distance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#ElementAt"},"ElementAt")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#EndOfMonth"},"EndOfMonth")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#EndOfWeek"},"EndOfWeek")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#ExponentialMovingAverage"},"ExponentialMovingAverage")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#Filters"},"Filters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#FormatTimeInZone"},"FormatTimeInZone")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#GeoHash"},"GeoHash")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#LinearTrend"},"LinearTrend")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#ListContains"},"ListContains")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#MapGet"},"MapGet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#S2AreaInKm2"},"S2AreaInKm2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#S2Id"},"S2Id")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#SelectFields"},"SelectFields")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#SingleFeatureWithType"},"SingleFeatureWithType")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#Split"},"Split")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#StartOfMonth"},"StartOfMonth")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#StartOfWeek"},"StartOfWeek")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#TimeInDate"},"TimeInDate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#TimestampFromUnix"},"TimestampFromUnix")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#JsonUpdate"},"JsonUpdate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#JsonQuery"},"JsonQuery")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#JsonDelete"},"JsonDelete")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#aggregate-functions"},"Aggregate Functions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#CollectArray"},"CollectArray")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#DistinctCount"},"DistinctCount")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#Features"},"Features")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#FeaturesWithType"},"FeaturesWithType")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#PercentileAggregator"},"PercentileAggregator")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#table-functions"},"Table Functions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#HistogramBucket"},"HistogramBucket")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#OutlierMad"},"OutlierMad"))))),(0,r.kt)("h3",{id:"scalar-functions"},"Scalar Functions"),(0,r.kt)("h4",{id:"arrayaggregate"},"ArrayAggregate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ArrayAggregate(Object[] arrayElements, String operationType, String inputDataType)"),"."))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"LongbowPlus")," but also can be used alone. Given an Object Array, this UDF performs basic Mathematical functions on the Array. You need to give the name of the function you want to use as a string and the Data type of the element inside the input array. Find details on LongbowPlus ",(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/advance/longbow_plus"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Currently, we only support limited operations on limited data types. The supported Data types and functions are listed below."))),(0,r.kt)("li",{parentName:"ul"},"Supported Data types and Functions:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Data type:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Integer"),(0,r.kt)("li",{parentName:"ul"},"Float"),(0,r.kt)("li",{parentName:"ul"},"Double"),(0,r.kt)("li",{parentName:"ul"},"Long"),(0,r.kt)("li",{parentName:"ul"},"Other(all other data types except the above)"))),(0,r.kt)("li",{parentName:"ul"},"Functions:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Basic Mathematical aggregation functions like \u2018average\u2019, \u2018sum\u2019, \u2018min\u2019, \u2019max\u2019, \u2019count\u2019, \u2019findFirst\u2019 etc."),(0,r.kt)("li",{parentName:"ul"},"Do some basic complex aggregations like distinct counts. You need to give an argument like \u2018distinct.count\u2019 as operationType.Prefixes have to be added before actual functions with a \u2018.\u2019 whenever required. The first operation here needs to output another Array. So for now, \u2018sort\u2019 and \u2018distinct\u2019 are only supported as the first element in complex types."),(0,r.kt)("li",{parentName:"ul"},"In the case of Float, the output will be in double. "),(0,r.kt)("li",{parentName:"ul"},"For \u2018Other\u2019 data types some basic operations like \u2018count\u2019, \u2018findFirst\u2019 are supported. You can also do something like \u2018distinct.count\u2019/\u2019sort.findFirst\u2019 here, but no other mathematical functions are supported here."),(0,r.kt)("li",{parentName:"ul"},"Listing here all the available functions for corresponding data types",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Mathematical Data Types:\n'average', 'min', 'max', 'sum', 'count', 'findFirst', 'findAny'"),(0,r.kt)("li",{parentName:"ul"},"Prefix:\n'sort', 'distinct'"),(0,r.kt)("li",{parentName:"ul"},"Other Data Types:\n'count', 'findFirst', 'findAny'"))))))),(0,r.kt)("li",{parentName:"ul"},"Example:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When used a single aggregation",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  ArrayAggregate(\n    SelectFields(proto_data, input_class_name, 'shopping_price'),\n    'sum',\n    'float') AS total_shoping_price_value\nFROM \n  data_stream\n"))),(0,r.kt)("li",{parentName:"ul"},"When used a basic double aggregation",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  ArrayAggregate(\n    SelectFields(proto_data, input_class_name, 'shopping_price'),\n    'distinct.sum',\n    'float') AS average_value\nFROM \n  data_stream\n")))))),(0,r.kt)("h4",{id:"arrayoperate"},"ArrayOperate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object[]")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ArrayOperate(Object[] arrayElements, String operationType, String inputDataType)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"LongbowPlus")," but also can be used alone. Given an Object Array, this UDF performs basic Mathematical functions on the Array. You need to give the name of the function you want to use as a string and the Data type of the element inside the input array. Find details on LongbowPlus ",(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/advance/longbow_plus"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Currently, we only support limited operations on limited data types. The supported Data types and functions are listed below."))),(0,r.kt)("li",{parentName:"ul"},"Supported Data types and Functions:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Data type:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Integer"),(0,r.kt)("li",{parentName:"ul"},"Float"),(0,r.kt)("li",{parentName:"ul"},"Double"),(0,r.kt)("li",{parentName:"ul"},"Long"),(0,r.kt)("li",{parentName:"ul"},"Other(all other data types except the above. For String you need to process it as Other)"))),(0,r.kt)("li",{parentName:"ul"},"Functions:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Distinct"),(0,r.kt)("li",{parentName:"ul"},"Sorted"))))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  ArrayOperate(\n    SelectFields(proto_data, input_class_name, 'shopping_price'),\n    'distinct', \n    'float') AS distinct_shoping_price_values\nFROM \n  data_stream\n")),(0,r.kt)("h4",{id:"bytetostring"},"ByteToString"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ByteToString(ByteString byteField)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Given a ByteString, this UDF converts to String"))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Select\n    ByteToString(payload) as payload_string\nfrom\n    data_streams\n")),(0,r.kt)("h4",{id:"condeq"},"CondEq"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Predicate<DynamicMessage>** CondEq(String fieldName, Object comparison)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"LongbowPlus")," and has to be used with ",(0,r.kt)("strong",{parentName:"li"},"SelectFields")," and ",(0,r.kt)("strong",{parentName:"li"},"Filters")," UDFs. Find details on LongbowPlus ",(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/advance/longbow_plus"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Can specify an equality condition with a fieldName and a value."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  SelectFields(\n    proto_data,\n    input_class_name,\n    'order_number'\n  ) AS favourite_service_provider_guids\nFROM \n  data_stream\nWHERE \n  cardinality(\n    SelectFields(\n      Filters(\n        proto_data, \n        input_class_name, \n        CondEq('status', 'CUSTOMER_CANCELLED')\n      ),\n      'order_number' \n    )\n  ) > 0\n")),(0,r.kt)("h4",{id:"dartcontains"},"DartContains"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Boolean")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DartContains(String collectionName, String value, int cacheTTLin_hours)")," OR"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Boolean")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DartContains(String collectionName, String value, String regex, int cacheTTLin_hours)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Check if a data point in the message is present in the GCS bucket"),(0,r.kt)("li",{parentName:"ul"},"Regex can you used to create the pattern using values from GCS to match against the field value."))),(0,r.kt)("li",{parentName:"ul"},"Example",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Without regex")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  data1,\n  data2,\n  TUMBLE_END(rowtime, INTERVAL '1' HOUR) AS event_timestamp\nFROM \n  data_stream\nWHERE \n  DartContains('test_collection', data1, 24)\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '1' HOUR)\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"With regex ")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  data1,\n  data2,\n  TUMBLE_END(rowtime, INTERVAL '1' HOUR) AS event_timestamp\nFROM \n  data_stream\nWHERE \n  DartContains('test_collection', data1, '^%s.*' 24)\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '1' HOUR)\n")))),(0,r.kt)("h4",{id:"dartget"},"DartGet"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DartGet(String collectionName, key, int cacheTTLin_hour)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Corresponding value in a GCS bucket given a key from data point"))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  DartGet('test_collection', data1, 24) AS tag_data1,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp,\nFROM\n  data_stream\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '60' SECOND)\n")),(0,r.kt)("h4",{id:"distance"},"Distance"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Double")," ",(0,r.kt)("inlineCode",{parentName:"li"},"Distance(Double latitude1, Double longitude1, Double latitude2, Double longitude2)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Calculates the distance between two points in km with given latitude and longitude."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  Distance(\n    data1_location.latitude,\n    data1_location.longitude,\n    data2_location.latitude,\n    data2_location.longitude\n  ) AS distance_data,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nFROM\n  data_stream\nwhere\n  status = 'CUSTOMER_CANCELLED'\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '60' SECOND),\n  data1_location.latitude,\n  data1_location.longitude,\n  data2_location.latitude,\n  data2_location.longitude\n")),(0,r.kt)("h4",{id:"elementat"},"ElementAt"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ElementAt(Row[] array, String pathOfArray, int index, String path, String tableName)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ElementAt(Row[] array, String pathOfArray, int index, String path)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ElementAt(Object[] array, int index)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ElementAt(ArrayList\\<Object\\> arrayList, int index)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For the given table name from the streams (In the case of multi-streams/JOINS), find out the element at a given index and a given path in an array of complex Data Types."),(0,r.kt)("li",{parentName:"ul"},"Finds out the element at a given index and a given path in an array of complex Data Types. Here table name is not provided, In that case, it will always apply the function on the table from the first stream in the configuration."),(0,r.kt)("li",{parentName:"ul"},"Finds out the element at a given index in case of an object Array."),(0,r.kt)("li",{parentName:"ul"},"Finds out the element at a given index in case of an object Arraylist."))),(0,r.kt)("li",{parentName:"ul"},"Examples:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example 1:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT\n  CAST(\n    ElementAt(test_data, 'data', 0, 'test_location.latitude', 'data_stream_2') AS double\n  ) AS lat,\n  CAST(\n    ElementAt(test_data, 'data', 0, 'test_location.longitude', 'data_stream_2') AS double\n  ) AS long,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nFROM\n  data_stream_1\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '60' SECOND),\n  ElementAt(test_data, 'data', 0, 'test_location.latitude', 'data_stream_2'),\n  ElementAt(test_data, 'data', 0, 'test_location.longitude', 'data_stream_2')\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example 2:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT\n  CAST(\n    ElementAt(test_data, 'data', 0, 'test_location.latitude') AS double\n  ) AS lat,\n  CAST(\n    ElementAt(test_data, 'data', 0, 'test_location.longitude') AS double\n  ) AS long,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nFROM\n  data_stream\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '60' SECOND),\n  ElementAt(test_data, 'data', 0, 'test_location.latitude'),\n  ElementAt(test_data, 'data', 0, 'test_location.longitude')\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Example 3:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"WITH tmpTable AS (\n  SELECT\n  SelectFields(\n    proto_data,\n    input_class_name,\n    'cancel_reason_id'\n  ) AS test_data_array,\n  longbow_read_key AS restaurant_id\n  FROM\n  data_stream\n)\nSELECT\n  restaurant_id,\n  ElementAt(test_data_array, -1) AS last_test_data_array,\n  ElementAt(test_data_array, -2) AS second_last_test_data_array,\n  ElementAt(test_data_array, -3) AS third_last_test_data_array\nFROM\n  tmpTable\n")))),(0,r.kt)("h4",{id:"endofmonth"},"EndOfMonth"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long")," ",(0,r.kt)("inlineCode",{parentName:"li"},"EndOfMonth(long seconds, String timeZone)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Calculates the seconds in Unix time for the end of a month of a given timestamp second and timezone."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  EndOfMonth(\n    event_timestamp.seconds, \n    'America/New_York') AS T\nFROM data_stream\n")),(0,r.kt)("h4",{id:"endofweek"},"EndOfWeek"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long")," ",(0,r.kt)("inlineCode",{parentName:"li"},"EndOfWeek(long seconds, String timeZone)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Calculates the seconds in Unix time for the end of a week of a given timestamp second and timezone."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  EndOfWeek(\n    event_timestamp.seconds,\n    'America/New_York') AS T\nFROM data_stream\n")),(0,r.kt)("h4",{id:"exponentialmovingaverage"},"ExponentialMovingAverage"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Double")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ExponentialMovingAverage(ArrayList\\<Timestamp\\> timestampsArray, ArrayList\\<Double\\> valuesArray, Timestamp hopStartTime, Double window, Double alpha)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Calculates exponential moving average (at per minute frequency) using a list of non-null values. Parameters are window (in minutes) and alpha. The hopStartTime and the corresponding list of timestamps denote the sequence of the non-null values in the window."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  CAST(\n    ExponentialMovingAverage(\n      timestamps_array,\n      values_array,\n      hop_start_time,\n      CAST(15 AS DOUBLE),\n      CAST(0.2 AS DOUBLE)\n    ) AS BIGINT\n  ) AS unique_data,\n  event_timestamp\nFROM\n  data_stream\n")),(0,r.kt)("h4",{id:"filters"},"Filters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List<DynamicMessage>** Filters(ByteString[] inputProtoBytes, String protoClassName, Predicate<DynamicMessage>... predicates)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"LongbowPlus")," and has to be used with ",(0,r.kt)("strong",{parentName:"li"},"SelectFields")," and ",(0,r.kt)("strong",{parentName:"li"},"CondEq")," UDFs. Find details on LongbowPlus ",(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/advance/longbow_plus"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Takes ByteString[] as the data and zero or more Predicates (we have only CondEq as a predicate that is defined for now). Applies the predicated conditions on the proto ByteString list field that is selected from the query and returns filtered Data."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  SelectFields(\n    proto_data,\n    input_class_name,\n    'order_number'\n  ) AS favourite_service_provider_guids\nFROM \n  data_stream\nWHERE \n  cardinality(\n    SelectFields(\n      Filters(\n        proto_data, \n        input_class_name, \n        CondEq('status', 'CUSTOMER_CANCELLED')\n      ),\n      'order_number' \n    )\n  ) > 0\n")),(0,r.kt)("h4",{id:"formattimeinzone"},"FormatTimeInZone"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"FormatTimeInZone(Timestamp timestamp, String timeZone, String dateFormat)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Gets formatted time from timestamp in given timezone."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  FormatTimeInZone(\n    event_timestamp,\n    'America/New_York',\n    'yyyy-MM-dd'\n  ) AS T\nFROM data_stream\n")),(0,r.kt)("h4",{id:"geohash"},"GeoHash"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"GeoHash"),(0,r.kt)("inlineCode",{parentName:"li"},"(Double latitude, Double longitude, int level)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns a geohash for a given level and lat-long for the given WGS84 point."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  data1_location.longitude AS long,\n  data1_location.latitude AS lat,\n  GeoHash(\n    data1_location.longitude,\n    data1_location.latitude,\n    6\n  ) AS geohashPickup,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nFROM\n  data_stream\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '60' SECOND),\n  data1_location.longitude,\n  data1_location.latitude\n")),(0,r.kt)("h4",{id:"lineartrend"},"LinearTrend"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Double")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LinearTrend(ArrayList<Timestamp> timestampsArray, ArrayList<Double> demandList, Timestamp hopStartTime, Integer windowLengthInMinutes)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns the gradient of the best fit line of the list of non-null demand values given the defined time window. hopStartTime and timestampsArray denote the sequence of non-null demand values in the window."),(0,r.kt)("li",{parentName:"ul"},"Find more details on Linear Trend Algorithm ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Linear_trend_estimation"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  CAST(\n    LinearTrend(\n      timestamps_array,\n      values_array,\n      hop_start_time,\n      15\n    ) AS BIGINT\n  ) AS unique_data,\n  event_timestamp\nFROM\n  data_stream\n")),(0,r.kt)("h4",{id:"listcontains"},"ListContains"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Boolean")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ListContains(String[] inputList, String item)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Checks if a list contains a given item."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  data1,\n  data2\nFROM \n  data_stream\nWHERE \n  ListContains(tests, 'test1')\n")),(0,r.kt)("h4",{id:"mapget"},"MapGet"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MapGet(Row[] inputMap, Object key)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns value for a corresponding key inside a map data type."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  CAST(\n    MapGet(\n      metadata,\n      'data1'\n      ) AS VARCHAR\n    ) AS data1\nFROM data_stream\n")),(0,r.kt)("h4",{id:"s2areainkm2"},"S2AreaInKm2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Boolean")," ",(0,r.kt)("inlineCode",{parentName:"li"},"S2AreaInKm2(String s2id)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Computes the area of an s2 cell in km2"))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  s2_id,\n  S2AreaInKm2(s2_id) AS area,\n  event_timestamp\nFROM data_stream\n")),(0,r.kt)("h4",{id:"selectfields"},"SelectFields"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Object[]")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SelectFields(ByteString[] inputProtoBytes, String protoClassName, String fieldPath) , Object[] SelectFields(List<DynamicMessage> filteredData, String fieldPath)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"LongbowPlus")," and has to be used either with ",(0,r.kt)("strong",{parentName:"li"},"SelectFields")," and ",(0,r.kt)("strong",{parentName:"li"},"Filters")," UDFs or alone. Find details on LongbowPlus ",(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/advance/longbow_plus"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Can select a single field from the list of proto bytes output from the LongbowRead phase. Can be used with or without applying filters on top of LongbowRead output(which will be in repeated bytes)."))),(0,r.kt)("li",{parentName:"ul"},"Example:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When used alone:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  cardinality(\n    SelectFields(\n      proto_data,\n      input_class_name,\n      'order_number'\n    )\n  )\nFROM data_stream\n"))),(0,r.kt)("li",{parentName:"ul"},"When used with Filters",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  SelectFields(\n    proto_data,\n    input_class_name,\n    'order_number'\n  ) AS favourite_service_provider_guids\nFROM \n  data_stream\nWHERE \n  cardinality(\n    SelectFields(\n      Filters(\n        proto_data, \n        input_class_name, \n        CondEq('status', 'CUSTOMER_CANCELLED')\n      ),\n      'order_number' \n    )\n  ) > 0\n")))))),(0,r.kt)("h4",{id:"s2id"},"S2Id"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"S2Id(Double latitude, Double longitude, int level)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Computes s2id for given lat, long and level."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  S2Id(data1.latitude, data1.longitude, 13) AS tag_s2id,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nFROM \n  data_stream\nGROUP BY \n  TUMBLE (rowtime, INTERVAL '60' SECOND),\n")),(0,r.kt)("h4",{id:"singlefeaturewithtype"},"SingleFeatureWithType"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Row[]")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SingleFeatureWithType(Object... value)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"Feast"),". Find details on Feast ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/feast-dev/feast/tree/master/docs#introduction"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Converts the given list of objects to a FeatureRow type with key and values from the first two args from every triplet passed in args and data type according to the third element of the triplet."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  SingleFeatureWithType(\n    'data1',\n    data1,\n    'StringType',\n    'data2',\n    data2,\n    'FloatType'\n  ) AS features\nFROM\n  data_stream\n")),(0,r.kt)("h4",{id:"split"},"Split"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String[]")," ",(0,r.kt)("inlineCode",{parentName:"li"},"Split(String inputString, String delimiter)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'Split input string based on input delimiter. The delimiter is a regex string, if you want to split by ".", you should use "',"\\",'." or it will give an empty array.'))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  SPLIT(data1) as new_data1, \nFROM\n  data_stream\n")),(0,r.kt)("h4",{id:"startofmonth"},"StartOfMonth"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long")," ",(0,r.kt)("inlineCode",{parentName:"li"},"StartOfMonth(long seconds, String time_zone)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Calculates the seconds in Unix time for the start of a month of a given timestamp second and timezone."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  StartOfMonth(\n    event_timestamp.seconds,\n    'America/New_York'\n  ) AS start_of_month\nFROM data_stream\n")),(0,r.kt)("h4",{id:"startofweek"},"StartOfWeek"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long")," ",(0,r.kt)("inlineCode",{parentName:"li"},"StartOfWeek(long seconds, String timeZone)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Calculates the seconds in Unix time for the start of a week of a given timestamp second and timezone."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  StartOfWeek(\n    event_timestamp.seconds,\n    'America/New_York'\n  ) AS start_of_week\nFROM data_stream\n")),(0,r.kt)("h4",{id:"timeindate"},"TimeInDate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TimeInDate(long event_timestamp, int hour, int minute)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TimeInDate(long seconds, int hour, int minute, String time_zone)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns calender's time value in seconds"))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  TimeInDate(event_timestamp.seconds, 10, 30, 'America/New_York') AS date\nFROM \n  data_stream\n")),(0,r.kt)("h4",{id:"timestampfromunix"},"TimestampFromUnix"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Timestamp")," TimestampFromUnix(long seconds) "))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Gets java.sql.Timestamp from UNIX seconds."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT \n  TimestampFromUnix(event_timestamp.seconds) AS T\nFROM \n  data_stream\n")),(0,r.kt)("h4",{id:"jsonupdate"},"JsonUpdate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Contract: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JsonUpdate(String jsonEvent, String jPath, Object newValue)")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Functionality:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns the json string with updated value in a given jsonPath. "),(0,r.kt)("li",{parentName:"ul"},"It uses special notation (JsonPath) and it traverses nodes and their connections to adjacent nodes mentioned in a JsonPath and updates the existing json with the provided newValue."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 1: Adds the new key k3 with value v3 to the existing Json"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  JsonUpdate('{\"k1\":null,\"k2\":\"v2\"}','$.k3','v3') AS T\nFROM \n  data_stream\n")),(0,r.kt)("p",{parentName:"li"},"Result: ",(0,r.kt)("inlineCode",{parentName:"p"},'{"k1":null,"k2":"v2","k2":"v3"}'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 2: Updates the new value v1 to the existing Json at jpath ",(0,r.kt)("inlineCode",{parentName:"p"},"$.k1")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  JsonUpdate('{\"k1\":null,\"k2\":\"v2\"}','$.k1','v1') AS T\nFROM \n  data_stream\n")),(0,r.kt)("p",{parentName:"li"},"Result: ",(0,r.kt)("inlineCode",{parentName:"p"},'{"k1":"v1","k2":"v2"}')))))),(0,r.kt)("h4",{id:"jsondelete"},"JsonDelete"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Contract:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JsonDelete(String jsonEvent, String jPath)")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Functionality:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns the json string with deleted value/node based on the mentioned jsonPath."),(0,r.kt)("li",{parentName:"ul"},"It uses special notation (JsonPath) and it traverses nodes and their connections to adjacent nodes mentioned in a JsonPath and deletes the existing value or node."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 1: Deletes the key value pair at jsonPath ",(0,r.kt)("inlineCode",{parentName:"p"},"$.k1")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'SELECT \n  JsonDelete(\'{"k1":null,"k2":"v2"}\',\'$.k1\') AS T\nFROM \n  data_stream\n')),(0,r.kt)("p",{parentName:"li"},"Result: ",(0,r.kt)("inlineCode",{parentName:"p"},'{"k2":"v2"}'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 2: Deletes the json node at jsonPath ",(0,r.kt)("inlineCode",{parentName:"p"},"$.k2")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'SELECT \n  JsonDelete(\'{"k1":"v1","k2":{"key1":"value1","key2":"value2"}}\',\'$.k2\') AS T\nFROM \n  data_stream\n')),(0,r.kt)("p",{parentName:"li"},"Result: ",(0,r.kt)("inlineCode",{parentName:"p"},'{"k1":"v1"}'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 3: Deletes the json index element value mentioned in the jsonpath ",(0,r.kt)("inlineCode",{parentName:"p"},"$.k2[1]")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'SELECT \n  JsonDelete(\'{"k1":"v1","k2":["value1","value2","value3"]}\',$.k2[1]) AS T\nFROM \n  data_stream\n')),(0,r.kt)("p",{parentName:"li"},"Result: ",(0,r.kt)("inlineCode",{parentName:"p"},'{"k1":"v1","k2":["value1","value3"]}')))))),(0,r.kt)("h4",{id:"jsonquery"},"JsonQuery"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JsonQuery(String jsonEvent, String jPath)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns the json string with child object mentioned in jsonPath."),(0,r.kt)("li",{parentName:"ul"},"It uses special notation (JsonPath) and it traverses nodes and their connections to adjacent nodes mentioned in a JsonPath and extracts the value."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'SELECT \n  JsonQuery(\'{"k1":null,"k2":{"key1":"value1","key2":"value2"}}\',\'$.k2\') AS T\nFROM \n  data_stream\n')),(0,r.kt)("p",null,"Result: ",(0,r.kt)("inlineCode",{parentName:"p"},'{"key1":"value1","key2":"value2"}')),(0,r.kt)("h3",{id:"aggregate-functions"},"Aggregate Functions"),(0,r.kt)("h4",{id:"collectarray"},"CollectArray"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"ArrayList<Object>"))," ",(0,r.kt)("inlineCode",{parentName:"li"},"CollectArray(Object obj)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Return an ArrayList of the objects passed."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  CollectArray(DISTINCT data1) AS data1s,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nFROM\n  data_stream\nGROUP BY\n  TUMBLE(rowtime, INTERVAL '60' SECOND)\n")),(0,r.kt)("h4",{id:"distinctcount"},"DistinctCount"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DistinctCount(String metric)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns the distinct count of a field in the input stream."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  DistinctCount(data1) AS distic_count_data1,\n  TUMBLE_END(rowtime, INTERVAL '60' SECOND) AS window_timestamp\nFROM\n  data_stream\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '60' SECOND)\n")),(0,r.kt)("h4",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Row[]"))," ",(0,r.kt)("inlineCode",{parentName:"li"},"Features(Object... objects)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:"),(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"Feast"),". Find details on Feast ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/feast-dev/feast/tree/master/docs#introduction"},"here"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Converts the given list of objects to a FeatureRow type with key and values from every pair passed in args."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  Features(\n    data1,\n    data2\n  ) AS features,\n  TUMBLE_END(rowtime, INTERVAL '1' MINUTE) AS event_timestamp\nFROM\n  data_stream\nGROUP BY\n  TUMBLE (rowtime, INTERVAL '1' MINUTE)\n")),(0,r.kt)("h4",{id:"featureswithtype"},"FeaturesWithType"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Row[]"))," ",(0,r.kt)("inlineCode",{parentName:"li"},"FeaturesWithType(Object... value)  [for FeatureRow]")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of the UDFs related to ",(0,r.kt)("strong",{parentName:"li"},"Feast"),". Find details on Feast ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/feast-dev/feast/tree/master/docs#introduction"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Converts the given list of objects to a FeatureRow type with key and values from the first two args from every triplet passed in args and data type according to the third element of the triplet."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  FeaturesWithType(\n    'data1', \n    data1,\n    'StringType', \n    'data2', \n    data2, \n    'FloatType'\n  ) AS features,\nFROM\n  data_stream\nGROUP BY\n  TUMBLE(rowtime, INTERVAL '1' MINUTE)\n")),(0,r.kt)("h4",{id:"percentileaggregator"},"PercentileAggregator"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Double")," ",(0,r.kt)("inlineCode",{parentName:"li"},"PercentileAggregator(BigDecimal percentile, BigDecimal value)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Get percentile value."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  PercentileAggregator(\n    data1, \n    data2\n  ) AS percentile,\nFROM\n  data_stream\nGROUP BY\n  TUMBLE(rowtime, INTERVAL '1' MINUTE)\n")),(0,r.kt)("h3",{id:"table-functions"},"Table Functions"),(0,r.kt)("h4",{id:"histogrambucket"},"HistogramBucket"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Void")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HistogramBucket(double dValue, String buckets)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns buckets for given value to calculate histograms."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  data1, \n  data2,\n  data3,\n  'buckets', \nFROM \n  data_stream,\nLATERAL TABLE(HistogramBucket(data1, 'buckets'));\n")),(0,r.kt)("h4",{id:"outliermad"},"OutlierMad"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Void")," ",(0,r.kt)("inlineCode",{parentName:"li"},"OutlierMad(ArrayList<Double> values, ArrayList<Timestamp> timestampsArray, Timestamp windowStartTime, Integer windowLengthInMinutes, Integer observationPeriodInMinutes, Integer tolerance, Integer outlierPercentage)")))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Determines outliers for a given time series based on threshold, observation window, and tolerance provided."))),(0,r.kt)("li",{parentName:"ul"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\n  `timestamp` AS window_timestamp,\n  `value`,\n  `upperBound`,\n  `lowerBound`,\n  CASE\n    WHEN `isOutlier` THEN 1\n    ElSE 0\n  END as isOutlier\nFROM \n  data_stream\nLATERAL TABLE(\n  OutlierMad(\n    values_array,\n    timestamps_array,\n    hop_start_time,\n    CAST(20 AS INTEGER),\n    CAST(3 AS INTEGER),\n    CAST(10 AS INTEGER),\n    CAST(10 AS INTEGER)\n  )\n) AS T(\n  `timestamp`,\n  `value`,\n  `upperBound`,\n  `lowerBound`,\n  `isOutlier`\n)\n")),(0,r.kt)("h2",{id:"list-of-python-udfs"},"List of Python Udfs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#python-scalar-functions"},"Scalar Functions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#Sample"},"Sample")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#Multiply"},"Multiply")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#python-aggregate-functions"},"Aggregate Functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dagger/docs/reference/udfs#python-table-functions"},"Table Functions"))),(0,r.kt)("h3",{id:"python-scalar-functions"},"Python Scalar Functions"),(0,r.kt)("h4",{id:"sample"},"Sample"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String")," ",(0,r.kt)("inlineCode",{parentName:"li"},"Sample(input_string)"),"."))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of sample python udfs. "),(0,r.kt)("li",{parentName:"ul"},"Adding extra string from ",(0,r.kt)("a",{target:"_blank",href:a(4671).Z},"data/sample.txt")," to the input_string."))),(0,r.kt)("li",{parentName:"ul"},"Example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  sample(inputString) as input_with_additonal_text\nFROM \n  data_stream\n")))),(0,r.kt)("h4",{id:"multiply"},"Multiply"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Float")," ",(0,r.kt)("inlineCode",{parentName:"li"},"Multiply(input_number1, input_number2)"),"."))),(0,r.kt)("li",{parentName:"ul"},"Functionality:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is one of sample python udfs. "),(0,r.kt)("li",{parentName:"ul"},"Multiply two input numbers specified."))),(0,r.kt)("li",{parentName:"ul"},"Example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"SELECT \n  multiply(input_number1, input_number2) as multiply_result\nFROM \n  data_stream\n")))),(0,r.kt)("h3",{id:"python-aggregate-functions"},"Python Aggregate Functions"),(0,r.kt)("h3",{id:"python-table-functions"},"Python Table Functions"))}u.isMDXComponent=!0},4671:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/sample_data-2124c2585fa0f6cc9974f0d0b89a6dd2.txt"}}]);